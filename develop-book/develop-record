开发记录：

angular实现拦截  （请求异常）
通过给$httpProvider 增加拦截来实现所有请求均通过该拦截器来处理
代码如下
 .factory('httpInterceptor' , ['$q' , "$injector" , function($q , $injector){
            var httpInterceptor = {
                'responseError':function(response){
                    if(response.status ==401){
                        var rootScope = $injector.get("$rootScope");
                        var state = $injector.get("$rootScope").$state.current.name;
                        rootScope.stateBeforeLogin = state;
                        rootScope.state.go("login");
                        return $q.reject(response);
                    }else if(response.status===404){
                        alert("404");
                        return $q.reject(response);
                    }

                },
                'response':function(response){
                    return response;
                }
            }
            return httpInterceptor;
        }])
        .config(['$httpProvider' , function($httpProvider){
            $httpProvider.interceptors.push('httpInterceptor');
        }])

        先创建一个拦截器对象，httpInterceptor
        然后将这个对象加入到http服务中  所有的的http请求都将经过该对象

angular实现sessionToken拦截
这里有两种方式来实现服务端的认证。第一种是传统的 Cookie-Based 验证。
通过服务端的 cookies 来对每个请求的用户进行认证。另一种方式是 Token-Based 验证。
当用户登录时，他会从后台拿到一个 sessionToken。sessionToken 在服务端标识了每个用户，并且会包含在发送到服务端的每个请求中。

拦截 分两种
一种请求拦截 ：  请求之前验证用户token是否失效，如果token不存在， 重新登录
二中响应拦截     如果用户使用失效的token请求服务器， 返回的结果是失效的请求， 这个时候要跳转到登录页重新执行登录